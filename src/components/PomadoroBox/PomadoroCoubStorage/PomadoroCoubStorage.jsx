import { useState, useEffect } from "react";
import PomadoroTimer from "../PomadoroTimer.jsx";
import PomadoroCoubDone from "../PomadoroCoub/PomadoroCoubDone.jsx";
import PomadoroViewSession from "../PomadoroViewSession/PomadoroViewSession.jsx";

export default function PomadoroCoubStorage() {
    const [status, setStatus] = useState(""); // –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏–ª–∏ —É—Å–ø–µ—Ö–µ –Ω–∞ –±—ç–∫–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–º–∏–¥–æ—Ä–æ–∫
    const COLORS = ["#35ca86", "#ff7f50", "#6a5acd", "#ffa500", "#20b2aa", "#ff69b4", "#4682b4", "#a52a2a"];
    const getRandomColor = () => COLORS[Math.floor(Math.random() * COLORS.length)];

    // –ü–µ—Ä–µ–¥–∞–º –∏—Ö –∏–∑ –¢–∞–π–º–µ—Ä–∞
    const [lastStart, setLastStart] = useState(null);

    // eslint-disable-next-line no-unused-vars
    const [lastEnd, setLastEnd] = useState(null);

    const [coubList, setCoubList] = useState([]);
    const [inputValue, setInputValue] = useState("");

    const sendTimeToCoub = (start, end) => {
        setLastStart(start);
        setLastEnd(end);
    };

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±—ç–∫–æ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        const fetchPomodoros = async () => {
            try {
                const res = await fetch("http://localhost:4200/api/pomodoro");
                const data = await res.json();
                setCoubList(data.map(p => ({ ...p, color: getRandomColor() })));
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–º–∏–¥–æ—Ä–æ–≤ —Å –±—ç–∫–∞:", err);
                setStatus("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–º–∏–¥–æ—Ä—ã");
            }
        };
        fetchPomodoros();
    }, []);

    // –§—É–Ω–∫—Ü–∏—è —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏

    // –ü–æ–ø—ã–¥–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ pomadoro –Ω–∞ –±—ç–∫–µ
    const donePomodoro = async () => {
        if (!inputValue.trim()) {
            setStatus("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            // ‚úÖ –¢–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            return;
        }

        const now = Date.now();

        // ------------------------- FRONTEND -------------------------
        // –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –∫—É–±–∏–∫)
        const newCoub = {
            title: inputValue,
            projectId: 1,
            startTime: lastStart ?? now, // ‚úÖ frontend: —Ç–µ–∫—É—â–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ "—Å–µ–π—á–∞—Å"
            endTime: lastEnd ?? now      // ‚úÖ frontend: —Ç–µ–∫—É—â–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ "—Å–µ–π—á–∞—Å"
        };
        // ------------------------------------------------------------

        try {
            // ------------------------- BACKEND -------------------------
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –±–∞–∑–µ
            const res = await fetch("http://localhost:4200/api/pomodoro", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(newCoub)  // ‚úÖ backend: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            });

            const saved = await res.json(); // ‚úÖ backend: –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å—å—é (–≤–æ–∑–º–æ–∂–Ω–æ —Å id)
            // ------------------------------------------------------------

            if (!res.ok) {
                setStatus(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${saved.message}`);
                // ‚úÖ frontend: –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                return;
            }

            // ------------------------- FRONTEND -------------------------
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π "–∫—É–±–∏–∫" –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            // –ó–¥–µ—Å—å —É–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å frontend-–ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ü–≤–µ—Ç
            setCoubList(prev => [...prev, { ...saved, color: getRandomColor() }]); // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ, –∞ —Ç–æ –∏–Ω–∞—á–µ –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            setInputValue("");            // ‚úÖ frontend: –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
            sendTimeToCoub(null, null);   // ‚úÖ frontend: —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
            setStatus("‚úÖ –ü–æ–º–∏–¥–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"); // ‚úÖ frontend: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // ------------------------------------------------------------

        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:", err);
            setStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
            // ‚úÖ frontend: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        }
    };

    const deleteCoub = async (id) => {
        try {
            const res = await fetch(`http://localhost:4200/api/pomodoro/${id}`, {
                method: "DELETE",
            });
            if (!res.ok) {
                const err = await res.json();
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", err.message);
                return;
            }

            // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            setCoubList(prev => prev.filter(coub => coub.id !== id));
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º:", err);
        }
    };

    return (


        <div className="flex flex-col gap-2 items-center">
            status && <label className="text-sm text-red-500">{status}</label>

            <label htmlFor="name">–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</label>
            <input
                className="inputText max-w-[300px] w-full"
                type="text"
                maxLength="1000"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
            />




            <button onClick={donePomodoro} className="buttonCoub max-w-[200px] w-full">üíü –°–æ–∑–¥–∞—Ç—å –∫—É–±–∏–∫</button>





            <div className="flex flex-wrap mt-5 max-w-[500px] transition-all duration-300">
                {coubList.map((coub) => (
                    <PomadoroCoubDone
                        key={coub.id}
                        title={coub.title}
                        color={coub.color}
                        startTime={coub.startTime}
                        endTime={coub.endTime}
                        onDelete={() => deleteCoub(coub.id)}
                    />
                ))}
            </div>

            <PomadoroViewSession></PomadoroViewSession>


            {/* –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–ª–ª–±–µ–∫ –≤ —Ç–∞–π–º–µ—Ä */}
            <PomadoroTimer sendTimeToCoub={sendTimeToCoub} />

        </div>
    );
}