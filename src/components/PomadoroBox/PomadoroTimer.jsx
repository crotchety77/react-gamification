import "./PomadoroTimer.css";
import { useEffect, useLayoutEffect, useRef, useState } from "react";
import { useCallback } from "react";

export default function PomadoroTimer( {sendTimeToCoub} ) {

    const [duration, setDuration] = useState(25 * 60 * 1000); // —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è —Ç–∞–π–º–µ—Ä = 25 –º–∏–Ω—É—Ç
    const [startAt, setStartAt] = useState(); // –∫–æ–≥–¥–∞ —Ç–∞–π–º–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
    const [initialTimer, setInitialTimer] = useState(0); // —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ, –µ—Å–ª–∏ –±—ã–ª–∞ –ø–∞—É–∑–∞

    const [firstStartAt, setFirstStartAt] = useState(); // üíæ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑


    const now = useNow(1000, startAt); // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥ –æ–±–Ω–æ–≤–ª—è–µ–º StartAt

    const timeFromStart = now - (startAt ?? now);
    // startAt ?? now –æ–∑–Ω–∞—á–∞–µ—Ç: "–µ—Å–ª–∏ startAt –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ, –∏–Ω–∞—á–µ ‚Äî now".
    // "–ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—É—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –Ω–æ–ª—å." —Ç–æ–≥–¥–∞ now - now = 0.


    const timer = timeFromStart + initialTimer; //  —Å—É–º–º–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä–æ—à–ª–æ–≥–æ (–µ—Å–ª–∏ –±—ã–ª–∞ –ø–∞—É–∑–∞).
    const countDown = duration - timer; // –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç!

    const secondsPassed = Math.floor(timer / 1000);
    const secondsLeft = Math.max(0, Math.ceil((duration - timer) / 1000));


    const toggleTimer = () => {
        if (startAt) {
            // –¢–∞–π–º–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É
            setInitialTimer(timer);
            setStartAt(undefined);
        } else {
            const now = Date.now();
            setStartAt(now);

            if (!firstStartAt) {
                setFirstStartAt(now);          // –°–æ—Ö—Ä–∞–Ω—è–µ–º "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç"
                sendTimeToCoub(now, null);     // –°–æ–æ–±—â–∞–µ–º –Ω–∞—Ä—É–∂—É ‚Äî —Ç–∞–π–º–µ—Ä –Ω–∞—á–∞–ª—Å—è!
            }
        }
    };


    const resetTimer = useCallback(() => {
        setFirstStartAt(undefined); // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—Ç–∞ –∑–∞–¥–∞—á–∏
        setStartAt();
        setInitialTimer(0);
    }, []); // –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è


    const setPomodoro = (minutes) => {
        resetTimer();
        setDuration(minutes * 60 * 1000);
    };



    const isCountEnd = countDown <= 0;

    // –ü—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ ‚Äî –≤—ã–∑—ã–≤–∞–µ–º onDone –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    useEffect(() => {
        if (isCountEnd && startAt) {
            const endAt = Date.now();
            sendTimeToCoub(startAt, endAt);
            resetTimer();
            setFirstStartAt(undefined); // –°–±—Ä–æ—Å –Ω–∞—á–∞–ª–∞ —Ç–∞–π–º–µ—Ä–∞
        }
    }, [isCountEnd, startAt, resetTimer, sendTimeToCoub, firstStartAt]);

    return (
        <div>
            <div style={{marginBottom: "10px"}}>
                <button onClick={() => setPomodoro(0.1)}>üçÖ 25 –º–∏–Ω</button>
                <button onClick={() => setPomodoro(5)}>‚òï 5 –º–∏–Ω</button>
                <button onClick={resetTimer}>üîÅ –°–±—Ä–æ—Å</button>
            </div>

            <button onClick={toggleTimer}>{!startAt ? "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç" : "‚è∏Ô∏è –ü–∞—É–∑–∞"}</button>

            <div style={{marginTop: "10px"}}>
                <div>–ü—Ä–æ—à–ª–æ: {formatTimeFromSeconds(secondsPassed)}</div>
                <div>–û—Å—Ç–∞–ª–æ—Å—å: {formatTimeFromSeconds(secondsLeft)}</div>
            </div>
        </div>
    );
}

function formatTimeFromSeconds(totalSeconds) {
    const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, "0");
    const seconds = String(totalSeconds % 60).padStart(2, "0");
    return `${minutes}:${seconds}`;
}

function useNow(updateInterval, enabled, cb) {
    const cbRef = useRef(cb);
    cbRef.current = cb;
    const [now, setNow] = useState(Date.now());

    useLayoutEffect(() => {
        if (!enabled) return;

        setNow(Date.now());
        cbRef.current?.(Date.now());

        const interval = setInterval(() => {
            setNow(Date.now());
            cbRef.current?.(Date.now());
        }, updateInterval);

        return () => clearInterval(interval);
    }, [updateInterval, enabled]);

    return now;
}
